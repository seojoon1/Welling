import { useState, useEffect } from 'react';
import styles from './org_topicComparison.module.css';
import { getTopGaps } from '../../../services/api';

function Org_TopicComparison({ selectedRegion = 'ÏÑúÏö∏ÌäπÎ≥ÑÏãú' }) {
  const [topics, setTopics] = useState([]);
  const [loading, setLoading] = useState(false);

  // ÏßÄÏó≠Î™Ö Î≥ÄÌôò (ÏÑúÏö∏ÌäπÎ≥ÑÏãú -> ÏÑúÏö∏)
  const getShortRegionName = (fullName) => {
    const mapping = {
      'ÏÑúÏö∏ÌäπÎ≥ÑÏãú': 'ÏÑúÏö∏',
      'Î∂ÄÏÇ∞Í¥ëÏó≠Ïãú': 'Î∂ÄÏÇ∞',
      'ÎåÄÍµ¨Í¥ëÏó≠Ïãú': 'ÎåÄÍµ¨',
      'Ïù∏Ï≤úÍ¥ëÏó≠Ïãú': 'Ïù∏Ï≤ú',
      'Í¥ëÏ£ºÍ¥ëÏó≠Ïãú': 'Í¥ëÏ£º',
      'ÎåÄÏ†ÑÍ¥ëÏó≠Ïãú': 'ÎåÄÏ†Ñ',
      'Ïö∏ÏÇ∞Í¥ëÏó≠Ïãú': 'Ïö∏ÏÇ∞',
      'ÏÑ∏Ï¢ÖÌäπÎ≥ÑÏûêÏπòÏãú': 'ÏÑ∏Ï¢Ö',
      'Í≤ΩÍ∏∞ÎèÑ': 'Í≤ΩÍ∏∞',
      'Í∞ïÏõêÌäπÎ≥ÑÏûêÏπòÎèÑ': 'Í∞ïÏõê',
      'Ï∂©Ï≤≠Î∂ÅÎèÑ': 'Ï∂©Î∂Å',
      'Ï∂©Ï≤≠ÎÇ®ÎèÑ': 'Ï∂©ÎÇ®',
      'Ï†ÑÎ∂ÅÌäπÎ≥ÑÏûêÏπòÎèÑ': 'Ï†ÑÎ∂Å',
      'Ï†ÑÎùºÎÇ®ÎèÑ': 'Ï†ÑÎÇ®',
      'Í≤ΩÏÉÅÎ∂ÅÎèÑ': 'Í≤ΩÎ∂Å',
      'Í≤ΩÏÉÅÎÇ®ÎèÑ': 'Í≤ΩÎÇ®',
      'Ï†úÏ£ºÌäπÎ≥ÑÏûêÏπòÎèÑ': 'Ï†úÏ£º',
    };
    return mapping[fullName] || fullName;
  };

  // ÏßÄÏó≠ ÏÑ†ÌÉù Ïãú ÏÉÅÏúÑ Gap Ï£ºÏ†ú Îç∞Ïù¥ÌÑ∞ Î∂àÎü¨Ïò§Í∏∞
  useEffect(() => {
    const fetchTopGaps = async () => {
      const regionName = getShortRegionName(selectedRegion);
      setLoading(true);

      try {
        console.log('üìà [TopGaps] Calling API:', `/api/regions/${regionName}/top-gaps/`);
        const result = await getTopGaps(regionName);
        console.log('üìà [TopGaps] Result:', result);

        if (result.success) {
          console.log('‚úÖ [TopGaps] Data:', result.data);

          // API ÏùëÎãµÏóêÏÑú top_gap_topics Î∞∞Ïó¥ Ï∂îÏ∂ú
          const topicsArray = result.data.top_gap_topics || result.data;

          // API ÏùëÎãµ Îç∞Ïù¥ÌÑ∞Î•º Ï∞®Ìä∏ ÌòïÏãùÏúºÎ°ú Î≥ÄÌôò
          const formattedTopics = topicsArray.map(topic => ({
            name: topic.topic || topic.topic_name || topic.name,
            opinion: topic.sentiment_score || topic.opinion || 0,
            policy: topic.policy_score || topic.policy || 0,
            gap: topic.gap || topic.gap_score || 0,
          }));

          console.log('‚úÖ [TopGaps] Formatted:', formattedTopics);
          setTopics(formattedTopics);
        } else {
          console.error('‚ùå [TopGaps] Failed:', result.error);
          setTopics([]);
        }
      } catch (err) {
        console.error('‚ùå [TopGaps] Error:', err);
        setTopics([]);
      } finally {
        setLoading(false);
      }
    };

    fetchTopGaps();
  }, [selectedRegion]);

  if (loading || topics.length === 0) {
    return (
      <div className={styles.container}>
        <h2 className={styles.title}>ÏÉÅÏúÑ Ï£ºÏ†ú Î≥Ñ ÎπÑÍµê</h2>
        <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', flex: 1 }}>
          <p style={{ color: '#808080', fontSize: '14px' }}>
            {loading ? 'Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò§Îäî Ï§ë...' : 'Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§.'}
          </p>
        </div>
      </div>
    );
  }

  return (
    <div className={styles.container}>
      <h2 className={styles.title}>ÏÉÅÏúÑ Ï£ºÏ†ú Î≥Ñ ÎπÑÍµê</h2>

      <div className={styles.legend}>
        <div className={styles.legendItem}>
          <svg xmlns="http://www.w3.org/2000/svg" width="2" height="14" viewBox="0 0 2 14" fill="none">
            <path d="M0.750002 14L0.75 0" stroke="#F96B6B" strokeWidth="1.5"/>
          </svg>
          <span>Ïó¨Î°†</span>
        </div>
        <div className={styles.legendItem}>
          <svg xmlns="http://www.w3.org/2000/svg" width="2" height="14" viewBox="0 0 2 14" fill="none">
            <path d="M0.750002 14L0.75 0" stroke="#7781F6" strokeWidth="1.5"/>
          </svg>
          <span>Ï†ïÏ±Ö</span>
        </div>
        <div className={styles.legendItem}>
          <svg xmlns="http://www.w3.org/2000/svg" width="2" height="14" viewBox="0 0 2 14" fill="none">
            <path d="M0.750002 14L0.75 0" stroke="#8563BA" strokeWidth="1.5"/>
          </svg>
          <span>Gap</span>
        </div>
      </div>

      <div className={styles.chartArea}>
        <div className={styles.scaleContainer}>
          <div className={styles.scaleLabels}>
            {[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100].map((value) => (
              <span key={value} style={{ left: `${value}%` }}>{value}</span>
            ))}
          </div>

          <div className={styles.gridLines}>
            <svg xmlns="http://www.w3.org/2000/svg" width="1" height="218" viewBox="0 0 1 218" fill="none" className={styles.gridLine} style={{ left: '0%' }}>
              <path d="M0.5 0L0.50001 218" stroke="#DDDDDD"/>
            </svg>
            {[10, 20, 30, 40, 50, 60, 70, 80, 90, 100].map((value) => (
              <svg key={value} xmlns="http://www.w3.org/2000/svg" width="1" height="218" viewBox="0 0 1 218" fill="none" className={styles.gridLineDashed} style={{ left: `${value}%` }}>
                <path d="M0.350098 0L0.35003 218" stroke="#DDDDDD" strokeWidth="0.7" strokeDasharray="6 6"/>
              </svg>
            ))}
          </div>
        </div>

        <div className={styles.topics}>
          {topics.map((topic, index) => (
            <div key={index} className={styles.topicRow}>
              <div className={styles.topicLabel}>
                {topic.name.split('\n').map((line, i) => (
                  <div key={i}>{line}</div>
                ))}
              </div>
              <div className={styles.bars}>
                <div className={styles.barContainer}>
                  <div
                    className={`${styles.bar} ${styles.barOpinion}`}
                    style={{ width: `${topic.opinion}%` }}
                  ></div>
                </div>
                <div className={styles.barContainer}>
                  <div
                    className={`${styles.bar} ${styles.barPolicy}`}
                    style={{ width: `${topic.policy}%` }}
                  ></div>
                </div>
                <div className={styles.barContainer}>
                  <div
                    className={`${styles.bar} ${styles.barGap}`}
                    style={{ width: `${topic.gap}%` }}
                  ></div>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}

export default Org_TopicComparison;
